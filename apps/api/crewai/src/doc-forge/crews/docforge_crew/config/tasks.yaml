# tasks.yaml
generate_prd:
  description: >
    Draft a production-ready Product Requirements document (PRD.md) based on the following user inputs:
    ```{user_inputs}```

    Ensure it follows the structure of the provided template (prd-template.md):
    ```{prd_template}```
    
    Key objectives:
    1. Translate potentially sparse or vague user input into a comprehensive PRD
    2. Infer any potential missing information the best you can.
    3. Be confident and strategic in your approach, as this is the first and only pass.
    4. Focus on clarity, completeness, and alignment with the template structure.
    5. Ensure your final output is not enclosed in ````markdown``` or any other code block format.
  expected_output: >
    PRDGenerationOutput Pydantic model of PRD.md file adhering to template sections with clear
    objectives, success metrics, core features, stretch goals,
    tech stack, and constraints.
  agent: product_strategist
  markdown: True
  # output_file: outputs/test-PRD.md

evaluate_prd:
  description: >
    Review PRD.md for completeness and clarity, per the rubric requirements.
    - Things to grade include: coverage, consistency, feasibility, user alignment, internal consistency, etc).
    - Include a one-paragraph summary of the top-3 improvement actions.
    - Output a JSON rubric with scores from 0-1 for each metric.
  expected_output: >
    EvaluatePRDReport Pydantic model of JSON rubric
  context: [generate_prd]
  agent: prd_judge
  # output_file: outputs/prd-rubric.json

# generate_architecture:
#   description: >
#     Produce ARCHITECTURE.md that fulfills the approved PRD using
#     architecture-template.md as structure.
#   expected_output: >
#     ARCHITECTURE.md covering component diagram, data flow, tech
#     choices, and ops considerations.
#   agent: architect

# evaluate_architecture:
#   description: >
#     Assess ARCHITECTURE.md against PRD; score feasibility, scalability,
#     risk mitigation; output JSON rubric + tips.
#   expected_output: >
#     JSON rubric + improvement notes.
#   agent: architecture_judge

# generate_agents:
#   description: >
#     Create AGENTS.md enumerating each agent with role, goal,
#     backstory, and dependencies.
#   expected_output: >
#     AGENTS.md aligned with PRD and ARCHITECTURE, ready for Codex.
#   agent: agent_designer

# lint_check:
#   description: >
#     Perform lint and schema validation across PRD.md, ARCHITECTURE.md,
#     and AGENTS.md; list violations.
#   expected_output: >
#     Markdown list of issues with file and line references (empty
#     list if none).
#   agent: lint_bot


#################### default example

# write_poem:
#   description: >
#     Write a poem about how CrewAI is awesome.
#     Ensure the poem is engaging and adheres to the specified sentence count of {sentence_count}.
#   expected_output: >
#     A beautifully crafted poem about CrewAI, with exactly {sentence_count} sentences.
#   agent: poem_writer

